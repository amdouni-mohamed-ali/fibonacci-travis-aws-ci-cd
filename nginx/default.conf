# upstream is used to define a server or a group of servers
# here we are defining a server for the react application. client:3000 is the endpoint. client was defined in docker-compose file 
# and by default react will listen to the 3000 port
upstream client {
    server client:3000;
}

upstream api {
    server api:5000;
}

server{

    listen 80;

    location / {
        proxy_pass http://client;
    }

    location /api {
        # in the rule below we will remove the /api from all requests. the group (.*) will be intercepted as the first group $1 from request 
        # and used to create the requested to be sent to the api server
        # example if the intercepted request is /api/hello/world we gonna sent /hello/world to the api
        # we used break to say to nginx to not apply any other rewrite rules after this one (if he has)
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }

    # well, each time we change our react js code the browser have to reload. this will not work until we define this connection because
    # the browser will not reach directly the react app. He have to pass over our nginx
    # so in this section we gonna defile this route /sockjs-node
    location /sockjs-node {

        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }
}